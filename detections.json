{"detections": [{"name": "Abnormally High Number Of Cloud Infrastructure API Calls", "author": "David Dorsey, Splunk", "date": "2020-09-07", "version": 1, "id": "0840ddf1-8c89-46ff-b730-c8d6722478c0", "description": "This search will detect a spike in the number of API calls made to your cloud infrastructure environment by a user.", "tags": {"name": "Abnormally High Number Of Cloud Infrastructure API Calls", "analytic_story": ["Suspicious Cloud User Activities", "Compromised User Account"], "asset_type": "AWS Instance", "cis20": ["CIS 13"], "kill_chain_phases": [], "mitre_attack_id": ["T1078.004", "T1078"], "nist": ["DE.AE"], "observable": [{"name": "user", "type": "User", "role": ["Attacker"]}], "message": "user $user$ has made $api_calls$ api calls, violating the dynamic threshold of $expected_upper_threshold$ with the following command $command$.", "risk_score": 15, "security_domain": "network", "risk_severity": "low", "mitre_attack_enrichments": []}, "search": "| tstats count as api_calls values(All_Changes.command) as command from datamodel=Change where All_Changes.user!=unknown All_Changes.status=success by All_Changes.user _time span=1h | `drop_dm_object_name(\"All_Changes\")` | eval HourOfDay=strftime(_time, \"%H\") | eval HourOfDay=floor(HourOfDay/4)*4 | eval DayOfWeek=strftime(_time, \"%w\") | eval isWeekend=if(DayOfWeek >= 1 AND DayOfWeek <= 5, 0, 1) | join user HourOfDay isWeekend [ summary cloud_excessive_api_calls_v1] | where cardinality >=16 | apply cloud_excessive_api_calls_v1 threshold=0.005 | rename \"IsOutlier(api_calls)\" as isOutlier | where isOutlier=1 | eval expected_upper_threshold = mvindex(split(mvindex(BoundaryRanges, -1), \":\"), 0) | where api_calls > expected_upper_threshold | eval distance_from_threshold = api_calls - expected_upper_threshold | table _time, user, command, api_calls, expected_upper_threshold, distance_from_threshold | `abnormally_high_number_of_cloud_infrastructure_api_calls_filter`", "how_to_implement": "You must be ingesting your cloud infrastructure logs. You also must run the baseline search `Baseline Of Cloud Infrastructure API Calls Per User` to create the probability density function.", "known_false_positives": "", "check_references": false, "references": [], "datamodel": ["Change"], "macros": [{"name": "abnormally_high_number_of_cloud_infrastructure_api_calls_filter", "definition": "search *", "description": "Update this macro to limit the output results to filter out false positives."}], "lookups": [], "source": "cloud", "enabled_by_default": false, "test_groups": [{"name": "Abnormally High Number Of Cloud Infrastructure API Calls:True Positive Test", "unit_test": {"name": "True Positive Test", "test_type": "unit", "baselines": [], "attack_data": [{"data": "https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/suspicious_behaviour/abnormally_high_cloud_instances_launched/cloudtrail_behavioural_detections.json", "source": "aws_cloudtrail", "sourcetype": "aws:cloudtrail", "update_timestamp": true}]}, "integration_test": {"name": "True Positive Test", "test_type": "integration"}, "attack_data": [{"data": "https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/suspicious_behaviour/abnormally_high_cloud_instances_launched/cloudtrail_behavioural_detections.json", "source": "aws_cloudtrail", "sourcetype": "aws:cloudtrail", "update_timestamp": true}]}]}, {"name": "Abnormally High Number Of Cloud Instances Destroyed", "author": "David Dorsey, Splunk", "date": "2020-08-21", "version": 1, "id": "ef629fc9-1583-4590-b62a-f2247fbf7bbf", "description": "This search finds for the number successfully destroyed cloud instances for every 4 hour block. This is split up between weekdays and the weekend. It then applies the probability densitiy model previously created and alerts on any outliers.", "tags": {"name": "Abnormally High Number Of Cloud Instances Destroyed", "analytic_story": ["Suspicious Cloud Instance Activities"], "asset_type": "Cloud Instance", "cis20": ["CIS 10"], "kill_chain_phases": [], "mitre_attack_id": ["T1078.004", "T1078"], "nist": ["DE.AE"], "observable": [{"name": "user", "type": "User", "role": ["Victim"]}, {"name": "dest", "type": "Hostname", "role": ["Victim"]}], "message": "tbd", "risk_score": 25, "security_domain": "Cloud", "risk_severity": "low", "mitre_attack_enrichments": []}, "search": "| tstats count as instances_destroyed values(All_Changes.object_id) as object_id from datamodel=Change where All_Changes.action=deleted AND All_Changes.status=success AND All_Changes.object_category=instance by All_Changes.user _time span=1h | `drop_dm_object_name(\"All_Changes\")` | eval HourOfDay=strftime(_time, \"%H\") | eval HourOfDay=floor(HourOfDay/4)*4 | eval DayOfWeek=strftime(_time, \"%w\") | eval isWeekend=if(DayOfWeek >= 1 AND DayOfWeek <= 5, 0, 1) | join HourOfDay isWeekend [summary cloud_excessive_instances_destroyed_v1] | where cardinality >=16 | apply cloud_excessive_instances_destroyed_v1 threshold=0.005 | rename \"IsOutlier(instances_destroyed)\" as isOutlier | where isOutlier=1 | eval expected_upper_threshold = mvindex(split(mvindex(BoundaryRanges, -1), \":\"), 0) | eval distance_from_threshold = instances_destroyed - expected_upper_threshold | table _time, user, instances_destroyed, expected_upper_threshold, distance_from_threshold, object_id | `abnormally_high_number_of_cloud_instances_destroyed_filter`", "how_to_implement": "You must be ingesting your cloud infrastructure logs. You also must run the baseline search `Baseline Of Cloud Instances Destroyed` to create the probability density function.", "known_false_positives": "Many service accounts configured within a cloud infrastructure are known to exhibit this behavior. Please adjust the threshold values and filter out service accounts from the output. Always verify if this search alerted on a human user.", "check_references": false, "references": [], "datamodel": ["Change"], "macros": [{"name": "abnormally_high_number_of_cloud_instances_destroyed_filter", "definition": "search *", "description": "Update this macro to limit the output results to filter out false positives."}], "lookups": [], "source": "cloud", "enabled_by_default": false, "test_groups": []}, {"name": "Abnormally High Number Of Cloud Instances Launched", "author": "David Dorsey, Splunk", "date": "2020-08-21", "version": 2, "id": "f2361e9f-3928-496c-a556-120cd4223a65", "description": "This search finds for the number successfully created cloud instances for every 4 hour block. This is split up between weekdays and the weekend. It then applies the probability densitiy model previously created and alerts on any outliers.", "tags": {"name": "Abnormally High Number Of Cloud Instances Launched", "analytic_story": ["Cloud Cryptomining", "Suspicious Cloud Instance Activities"], "asset_type": "Cloud Instance", "cis20": ["CIS 10"], "kill_chain_phases": [], "mitre_attack_id": ["T1078.004", "T1078"], "nist": ["DE.AE"], "observable": [{"name": "user", "type": "User", "role": ["Victim"]}], "message": "tbd", "risk_score": 25, "security_domain": "Cloud", "risk_severity": "low", "mitre_attack_enrichments": []}, "search": "| tstats count as instances_launched values(All_Changes.object_id) as object_id from datamodel=Change where (All_Changes.action=created) AND All_Changes.status=success AND All_Changes.object_category=instance by All_Changes.user _time span=1h | `drop_dm_object_name(\"All_Changes\")` | eval HourOfDay=strftime(_time, \"%H\") | eval HourOfDay=floor(HourOfDay/4)*4 | eval DayOfWeek=strftime(_time, \"%w\") | eval isWeekend=if(DayOfWeek >= 1 AND DayOfWeek <= 5, 0, 1) | join HourOfDay isWeekend [summary cloud_excessive_instances_created_v1] | where cardinality >=16 | apply cloud_excessive_instances_created_v1 threshold=0.005 | rename \"IsOutlier(instances_launched)\" as isOutlier | where isOutlier=1 | eval expected_upper_threshold = mvindex(split(mvindex(BoundaryRanges, -1), \":\"), 0) | eval distance_from_threshold = instances_launched - expected_upper_threshold | table _time, user, instances_launched, expected_upper_threshold, distance_from_threshold, object_id | `abnormally_high_number_of_cloud_instances_launched_filter`", "how_to_implement": "You must be ingesting your cloud infrastructure logs. You also must run the baseline search `Baseline Of Cloud Instances Launched` to create the probability density function.", "known_false_positives": "Many service accounts configured within an AWS infrastructure are known to exhibit this behavior. Please adjust the threshold values and filter out service accounts from the output. Always verify if this search alerted on a human user.", "check_references": false, "references": [], "datamodel": ["Change"], "macros": [{"name": "abnormally_high_number_of_cloud_instances_launched_filter", "definition": "search *", "description": "Update this macro to limit the output results to filter out false positives."}], "lookups": [], "source": "cloud", "enabled_by_default": false, "test_groups": []}, {"name": "Abnormally High Number Of Cloud Security Group API Calls", "author": "David Dorsey, Splunk", "date": "2020-09-07", "version": 1, "id": "d4dfb7f3-7a37-498a-b5df-f19334e871af", "description": "This search will detect a spike in the number of API calls made to your cloud infrastructure environment about security groups by a user.", "tags": {"name": "Abnormally High Number Of Cloud Security Group API Calls", "analytic_story": ["Suspicious Cloud User Activities"], "asset_type": "AWS Instance", "cis20": ["CIS 13"], "kill_chain_phases": [], "mitre_attack_id": ["T1078.004", "T1078"], "nist": ["DE.AE"], "observable": [{"name": "user", "type": "User", "role": ["Attacker"]}], "message": "user $user$ has made $api_calls$ api calls related to security groups, violating the dynamic threshold of $expected_upper_threshold$ with the following command $command$.", "risk_score": 15, "security_domain": "network", "risk_severity": "low", "mitre_attack_enrichments": []}, "search": "| tstats count as security_group_api_calls values(All_Changes.command) as command from datamodel=Change where All_Changes.object_category=firewall AND All_Changes.status=success by All_Changes.user _time span=1h | `drop_dm_object_name(\"All_Changes\")` | eval HourOfDay=strftime(_time, \"%H\") | eval HourOfDay=floor(HourOfDay/4)*4 | eval DayOfWeek=strftime(_time, \"%w\") | eval isWeekend=if(DayOfWeek >= 1 AND DayOfWeek <= 5, 0, 1) | join user HourOfDay isWeekend [ summary cloud_excessive_security_group_api_calls_v1] | where cardinality >=16 | apply cloud_excessive_security_group_api_calls_v1 threshold=0.005 | rename \"IsOutlier(security_group_api_calls)\" as isOutlier | where isOutlier=1 | eval expected_upper_threshold = mvindex(split(mvindex(BoundaryRanges, -1), \":\"), 0) | where security_group_api_calls > expected_upper_threshold | eval distance_from_threshold = security_group_api_calls - expected_upper_threshold | table _time, user, command, security_group_api_calls, expected_upper_threshold, distance_from_threshold | `abnormally_high_number_of_cloud_security_group_api_calls_filter`", "how_to_implement": "You must be ingesting your cloud infrastructure logs. You also must run the baseline search `Baseline Of Cloud Security Group API Calls Per User` to create the probability density function model.", "known_false_positives": "", "check_references": false, "references": [], "datamodel": ["Change"], "macros": [{"name": "abnormally_high_number_of_cloud_security_group_api_calls_filter", "definition": "search *", "description": "Update this macro to limit the output results to filter out false positives."}], "lookups": [], "source": "cloud", "enabled_by_default": false, "test_groups": [{"name": "Abnormally High Number Of Cloud Security Group API Calls:True Positive Test", "unit_test": {"name": "True Positive Test", "test_type": "unit", "baselines": [], "attack_data": [{"data": "https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/suspicious_behaviour/abnormally_high_cloud_instances_launched/cloudtrail_behavioural_detections.json", "source": "aws_cloudtrail", "sourcetype": "aws:cloudtrail", "update_timestamp": true}]}, "integration_test": {"name": "True Positive Test", "test_type": "integration"}, "attack_data": [{"data": "https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/suspicious_behaviour/abnormally_high_cloud_instances_launched/cloudtrail_behavioural_detections.json", "source": "aws_cloudtrail", "sourcetype": "aws:cloudtrail", "update_timestamp": true}]}]}, {"name": "Amazon EKS Kubernetes cluster scan detection", "author": "Rod Soto, Splunk", "date": "2020-04-15", "version": 1, "id": "294c4686-63dd-4fe6-93a2-ca807626704a", "description": "This search provides information of unauthenticated requests via user agent, and authentication data against Kubernetes cluster in AWS", "tags": {"name": "Amazon EKS Kubernetes cluster scan detection", "analytic_story": ["Kubernetes Scanning Activity"], "asset_type": "Amazon EKS Kubernetes cluster", "cis20": ["CIS 10"], "kill_chain_phases": [], "mitre_attack_id": ["T1526"], "nist": ["DE.AE"], "observable": [{"name": "user", "type": "User", "role": ["Victim"]}], "message": "tbd", "risk_score": 25, "security_domain": "threat", "risk_severity": "low", "mitre_attack_enrichments": []}, "search": "`aws_cloudwatchlogs_eks` \"user.username\"=\"system:anonymous\" userAgent!=\"AWS Security Scanner\" | rename sourceIPs{} as src_ip | stats count min(_time) as firstTime max(_time) as lastTime values(responseStatus.reason) values(source) as cluster_name values(responseStatus.code) values(userAgent) as http_user_agent values(verb) values(requestURI) by src_ip user.username user.groups{} | `security_content_ctime(lastTime)` | `security_content_ctime(firstTime)` |`amazon_eks_kubernetes_cluster_scan_detection_filter` ", "how_to_implement": "You must install the AWS App for Splunk (version 5.1.0 or later) and Splunk Add-on for AWS (version 4.4.0 or later), then configure your CloudWatch EKS Logs inputs.", "known_false_positives": "Not all unauthenticated requests are malicious, but frequency, UA and source IPs will provide context.", "check_references": false, "references": [], "datamodel": [], "macros": [{"name": "aws_cloudwatchlogs_eks", "definition": "sourcetype=\"aws:cloudwatchlogs:eks\"", "description": "customer specific splunk configurations(eg- index, source, sourcetype). Replace the macro definition with configurations for your Splunk Environmnent."}, {"name": "security_content_ctime", "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "arguments": ["field"]}, {"name": "amazon_eks_kubernetes_cluster_scan_detection_filter", "definition": "search *", "description": "Update this macro to limit the output results to filter out false positives."}], "lookups": [], "source": "cloud", "enabled_by_default": false, "test_groups": []}, {"name": "Amazon EKS Kubernetes Pod scan detection", "author": "Rod Soto, Splunk", "date": "2020-04-15", "version": 1, "id": "dbfca1dd-b8e5-4ba4-be0e-e565e5d62002", "description": "The following analytic detects unauthenticated requests made against the Kubernetes' Pods API through proactive monitoring to protect the Kubernetes environment from unauthorized access and potential security breaches. The detection is made by using the Splunk query `aws_cloudwatchlogs_eks` with specific filters to identify these requests. Identifies events where the `user.username` is set to \"system:anonymous\", the `verb` is set to \"list\", and the `objectRef.resource` is set to \"pods\". Additionally, the search checks if the `requestURI` is equal to \"/api/v1/pods\". Analyzing these events helps you to identify any unauthorized access attempts to the Kubernetes' Pods API. Unauthenticated requests can indicate potential security breaches or unauthorized access to sensitive resources within the Kubernetes environment. The detection is important because unauthorized access to Kubernetes' Pods API can lead to the compromise of sensitive data, unauthorized execution of commands, or even the potential for lateral movement within the Kubernetes cluster. False positives might occur since there might be legitimate use cases for unauthenticated requests in certain scenarios. Therefore, you must review and validate any detected events before taking any action.  Next steps include investigating the incident to mitigate any ongoing threats, and strengthening the security measures to prevent future unauthorized access attempts.", "tags": {"name": "Amazon EKS Kubernetes Pod scan detection", "analytic_story": ["Kubernetes Scanning Activity"], "asset_type": "Amazon EKS Kubernetes cluster Pod", "cis20": ["CIS 10"], "kill_chain_phases": [], "mitre_attack_id": ["T1526"], "nist": ["DE.AE"], "observable": [{"name": "user", "type": "User", "role": ["Victim"]}], "message": "tbd", "risk_score": 25, "security_domain": "threat", "risk_severity": "low", "mitre_attack_enrichments": []}, "search": "`aws_cloudwatchlogs_eks` \"user.username\"=\"system:anonymous\" verb=list objectRef.resource=pods requestURI=\"/api/v1/pods\" | rename source as cluster_name sourceIPs{} as src_ip | stats count min(_time) as firstTime max(_time) as lastTime values(responseStatus.reason) values(responseStatus.code) values(userAgent) values(verb) values(requestURI) by src_ip cluster_name user.username user.groups{} | `security_content_ctime(lastTime)` | `security_content_ctime(firstTime)` | `amazon_eks_kubernetes_pod_scan_detection_filter` ", "how_to_implement": "You must install the AWS App for Splunk (version 5.1.0 or later) and Splunk Add-on forAWS (version 4.4.0 or later), then configure your AWS CloudWatch EKS Logs.Please also customize the `kubernetes_pods_aws_scan_fingerprint_detection` macro to filter out the false positives.", "known_false_positives": "Not all unauthenticated requests are malicious, but frequency, UA and source IPs and direct request to API provide context.", "check_references": false, "references": [], "datamodel": [], "macros": [{"name": "aws_cloudwatchlogs_eks", "definition": "sourcetype=\"aws:cloudwatchlogs:eks\"", "description": "customer specific splunk configurations(eg- index, source, sourcetype). Replace the macro definition with configurations for your Splunk Environmnent."}, {"name": "security_content_ctime", "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "arguments": ["field"]}, {"name": "amazon_eks_kubernetes_pod_scan_detection_filter", "definition": "search *", "description": "Update this macro to limit the output results to filter out false positives."}], "lookups": [], "source": "cloud", "enabled_by_default": false, "test_groups": []}, {"name": "ASL AWS Concurrent Sessions From Different Ips", "author": "Patrick Bareiss, Splunk", "date": "2023-05-23", "version": 1, "id": "b3424bbe-3204-4469-887b-ec144483a336", "description": "The following analytic identifies an AWS IAM account with concurrent sessions coming from more than one unique IP address within the span of 5 minutes. This behavior could represent a session hijacking attack whereby an adversary has extracted cookies from a victims browser and is using them from a different location to access corporate online resources. When a user navigates the AWS Console after authentication, the API call with the event name `DescribeEventAggregates` is registered in the AWS CloudTrail logs. The Splunk Threat Research team leveraged this event name to identify 2 concurrent sessions. The presence of this event occurring from two different IP addresses is highly unlikely. As users may behave differently across organizations, security teams should test and customize this detection to fit their environments.", "tags": {"name": "ASL AWS Concurrent Sessions From Different Ips", "analytic_story": ["Compromised User Account", "AWS Identity and Access Management Account Takeover"], "asset_type": "AWS Account", "cis20": ["CIS 10"], "kill_chain_phases": [], "mitre_attack_id": ["T1185"], "nist": ["DE.AE"], "observable": [{"name": "identity.user.credential_uid", "type": "User", "role": ["Victim"]}, {"name": "src_endpoint.ip", "type": "IP Address", "role": ["Attacker"]}], "message": "User $identity.user.name$ has concurrent sessions from more than one unique IP address $src_endpoint.ip$ in the span of 5 minutes.", "risk_score": 42, "security_domain": "threat", "risk_severity": "low", "mitre_attack_enrichments": []}, "search": " `amazon_security_lake` api.operation=DescribeEventAggregates src_endpoint.domain!=\"AWS Internal\" | bin span=5m _time | stats values(src_endpoint.ip) as src_endpoint.ip dc(src_endpoint.ip) as distinct_ip_count by _time identity.user.credential_uid identity.user.name | where distinct_ip_count > 1 | `aws_concurrent_sessions_from_different_ips_filter`", "how_to_implement": "You must install Splunk Add-On for AWS Version v7.0.0 (https://splunkbase.splunk.com/app/1876) that includes includes a merge of all the capabilities of the Splunk Add-on for Amazon Security Lake. This search works with Amazon Security Lake logs which are parsed in the Open Cybersecurity Schema Framework (OCSF)format.", "known_false_positives": "A user with concurrent sessions from different Ips may also represent the legitimate use of more than one device. Filter as needed and/or customize the threshold to fit your environment.", "check_references": false, "references": ["https://attack.mitre.org/techniques/T1185/", "https://breakdev.org/evilginx-2-next-generation-of-phishing-2fa-tokens/", "https://github.com/kgretzky/evilginx2"], "datamodel": [], "macros": [{"name": "amazon_security_lake", "definition": "sourcetype=aws:asl", "description": "customer specific splunk configurations(eg- index, source, sourcetype). Replace the macro definition with configurations for your Splunk Environmnent."}, {"name": "asl_aws_concurrent_sessions_from_different_ips_filter", "definition": "search *", "description": "Update this macro to limit the output results to filter out false positives."}], "lookups": [], "source": "cloud", "providing_technologies": ["Amazon Security Lake"], "enabled_by_default": false, "test_groups": []}, {"name": "ASL AWS CreateAccessKey", "author": "Patrick Bareiss, Splunk", "date": "2022-05-23", "version": 1, "id": "ccb3e4af-23d6-407f-9842-a26212816c9e", "description": "This detection rule monitors for the creation of AWS Identity and Access Management (IAM) access keys. An IAM access key consists of an access key ID and secret access key, which are used to sign programmatic requests to AWS services. While IAM access keys can be legitimately used by developers and administrators for API access, their creation can also be indicative of malicious activity. Attackers who have gained unauthorized access to an AWS environment might create access keys as a means to establish persistence or to exfiltrate data through the APIs. Moreover, because access keys can be used to authenticate with AWS services without the need for further interaction, they can be particularly appealing for bad actors looking to operate under the radar. Consequently, it's important to vigilantly monitor and scrutinize access key creation events, especially if they are associated with unusual activity or are created by users who don't typically perform these actions. This hunting query identifies when a potentially compromised user creates a IAM access key for another user who may have higher privilleges, which can be a sign for privilege escalation. Hunting queries are designed to be executed manual during threat hunting.", "tags": {"name": "ASL AWS CreateAccessKey", "analytic_story": ["AWS IAM Privilege Escalation"], "asset_type": "AWS Account", "cis20": ["CIS 10"], "kill_chain_phases": [], "mitre_attack_id": ["T1078"], "nist": ["DE.AE"], "observable": [{"name": "src_endpoint.ip", "type": "IP Address", "role": ["Attacker"]}, {"name": "identity.user.name", "type": "User", "role": ["Attacker"]}], "message": "User $responseElements.accessKey.userName$ is attempting to create access keys for $responseElements.accessKey.userName$ from this IP $src_endpoint.ip$", "risk_score": 63, "security_domain": "threat", "risk_severity": "medium", "mitre_attack_enrichments": []}, "search": "`amazon_security_lake` api.operation=CreateAccessKey http_request.user_agent!=console.amazonaws.com api.response.error=null | rename unmapped{}.key as unmapped_key , unmapped{}.value as unmapped_value | eval keyjoin=mvzip(unmapped_key,unmapped_value) | mvexpand keyjoin | rex field=keyjoin \"^(?<key>[^,]+),(?<value>.*)$\" | eval {key} = value | search responseElements.accessKey.userName = * | rename identity.user.name as identity_user_name, responseElements.accessKey.userName as responseElements_accessKey_userName | eval match=if(identity_user_name=responseElements_accessKey_userName,1,0) | search match=0 | rename identity_user_name as identity.user.name , responseElements_accessKey_userName as responseElements.accessKey.userName | stats count min(_time) as firstTime max(_time) as lastTime by responseElements.accessKey.userName api.operation api.service.name identity.user.account_uid identity.user.credential_uid identity.user.name identity.user.type identity.user.uid identity.user.uuid http_request.user_agent src_endpoint.ip | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` |`asl_aws_createaccesskey_filter`", "how_to_implement": "You must install Splunk Add-On for AWS Version v7.0.0 (https://splunkbase.splunk.com/app/1876) that includes includes a merge of all the capabilities of the Splunk Add-on for Amazon Security Lake. This search works with Amazon Security Lake logs which are parsed in the Open Cybersecurity Schema Framework (OCSF)format.", "known_false_positives": "While this search has no known false positives, it is possible that an AWS admin has legitimately created keys for another user.", "check_references": false, "references": ["https://bishopfox.com/blog/privilege-escalation-in-aws", "https://rhinosecuritylabs.com/aws/aws-privilege-escalation-methods-mitigation-part-2/"], "datamodel": [], "macros": [{"name": "amazon_security_lake", "definition": "sourcetype=aws:asl", "description": "customer specific splunk configurations(eg- index, source, sourcetype). Replace the macro definition with configurations for your Splunk Environmnent."}, {"name": "security_content_ctime", "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "arguments": ["field"]}, {"name": "asl_aws_createaccesskey_filter", "definition": "search *", "description": "Update this macro to limit the output results to filter out false positives."}], "lookups": [], "source": "cloud", "providing_technologies": ["Amazon Security Lake"], "enabled_by_default": false, "test_groups": [{"name": "ASL AWS CreateAccessKey:True Positive Test", "unit_test": {"name": "True Positive Test", "test_type": "unit", "baselines": [], "attack_data": [{"data": "https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/attack_techniques/T1078/amazon_security_lake.json", "source": "aws_asl", "sourcetype": "aws:asl", "update_timestamp": true}]}, "integration_test": {"name": "True Positive Test", "test_type": "integration"}, "attack_data": [{"data": "https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/attack_techniques/T1078/amazon_security_lake.json", "source": "aws_asl", "sourcetype": "aws:asl", "update_timestamp": true}]}]}, {"name": "ASL AWS Defense Evasion Delete Cloudtrail", "author": "Patrick Bareiss, Splunk", "date": "2023-05-31", "version": 1, "id": "1f0b47e5-0134-43eb-851c-e3258638945e", "description": "This analytic identifies AWS `DeleteTrail` events within CloudTrail logs. Adversaries often try to impair their target's defenses by stopping their malicious activity from being logged, so that they may operate with stealth and avoid detection. When the adversary has the right type of permissions in the compromised AWS environment, they may delete the the entire cloudtrail that is logging activities in the environment.", "tags": {"name": "ASL AWS Defense Evasion Delete Cloudtrail", "analytic_story": ["AWS Defense Evasion"], "asset_type": "AWS Account", "cis20": ["CIS 10"], "kill_chain_phases": [], "mitre_attack_id": ["T1562.008", "T1562"], "nist": ["DE.CM"], "observable": [{"name": "src_endpoint.ip", "type": "IP Address", "role": ["Attacker"]}, {"name": "identity.user.name", "type": "User", "role": ["Victim"]}], "message": "User $identity.user.name$ has delete a CloudTrail logging for account id $identity.user.account_uid$", "risk_score": 90, "security_domain": "threat", "risk_severity": "high", "mitre_attack_enrichments": []}, "search": "`amazon_security_lake` api.operation=DeleteTrail | stats count min(_time) as firstTime max(_time) as lastTime by identity.user.account_uid identity.user.credential_uid identity.user.name identity.user.type identity.user.uid identity.user.uuid http_request.user_agent src_endpoint.ip cloud.region | `security_content_ctime(firstTime)`| `security_content_ctime(lastTime)`| `asl_aws_defense_evasion_delete_cloudtrail_filter`", "how_to_implement": "You must install Splunk Add-On for AWS Version v7.0.0 (https://splunkbase.splunk.com/app/1876) that includes includes a merge of all the capabilities of the Splunk Add-on for Amazon Security Lake. This search works with Amazon Security Lake logs which are parsed in the Open Cybersecurity Schema Framework (OCSF)format.", "known_false_positives": "While this search has no known false positives, it is possible that an AWS admin has stopped cloudTrail logging. Please investigate this activity.", "check_references": false, "references": ["https://attack.mitre.org/techniques/T1562/008/"], "datamodel": [], "macros": [{"name": "amazon_security_lake", "definition": "sourcetype=aws:asl", "description": "customer specific splunk configurations(eg- index, source, sourcetype). Replace the macro definition with configurations for your Splunk Environmnent."}, {"name": "security_content_ctime", "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "arguments": ["field"]}, {"name": "asl_aws_defense_evasion_delete_cloudtrail_filter", "definition": "search *", "description": "Update this macro to limit the output results to filter out false positives."}], "lookups": [], "source": "cloud", "nes_fields": "user,dest", "providing_technologies": ["Amazon Security Lake"], "enabled_by_default": false, "test_groups": [{"name": "ASL AWS Defense Evasion Delete Cloudtrail:True Positive Test", "unit_test": {"name": "True Positive Test", "test_type": "unit", "baselines": [], "attack_data": [{"data": "https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/attack_techniques/T1562.008/stop_delete_cloudtrail/amazon_security_lake.json", "source": "aws_asl", "sourcetype": "aws:asl"}]}, "integration_test": {"name": "True Positive Test", "test_type": "integration"}, "attack_data": [{"data": "https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/attack_techniques/T1562.008/stop_delete_cloudtrail/amazon_security_lake.json", "source": "aws_asl", "sourcetype": "aws:asl"}]}]}, {"name": "ASL AWS Defense Evasion Delete CloudWatch Log Group", "author": "Patrick Bareiss, Splunk", "date": "2023-05-31", "version": 1, "id": "0f701b38-a0fb-43fd-a83d-d12265f71f33", "description": "This analytic identifies AWS `DeleteLogGroup` events in CloudTrail logs. Attackers may evade the logging capability by deleting the log group in CloudWatch. This will stop sending the logs and metrics to CloudWatch. When the adversary has the right type of permissions within the compromised AWS environment, they may delete the CloudWatch log group that is logging activities in the environment.", "tags": {"name": "ASL AWS Defense Evasion Delete CloudWatch Log Group", "analytic_story": ["AWS Defense Evasion"], "asset_type": "AWS Account", "cis20": ["CIS 10"], "kill_chain_phases": [], "mitre_attack_id": ["T1562", "T1562.008"], "nist": ["DE.CM"], "observable": [{"name": "src_endpoint.ip", "type": "IP Address", "role": ["Attacker"]}, {"name": "identity.user.name", "type": "User", "role": ["Victim"]}], "message": "User $identity.user.name$ has deleted a CloudWatch logging group for account id $identity.user.account_uid$", "risk_score": 90, "security_domain": "threat", "risk_severity": "high", "mitre_attack_enrichments": []}, "search": "`amazon_security_lake` api.operation=DeleteLogGroup | stats count min(_time) as firstTime max(_time) as lastTime by identity.user.account_uid identity.user.credential_uid identity.user.name identity.user.type identity.user.uid identity.user.uuid http_request.user_agent src_endpoint.ip cloud.region | `security_content_ctime(firstTime)`| `security_content_ctime(lastTime)`| `asl_aws_defense_evasion_delete_cloudwatch_log_group_filter`", "how_to_implement": "You must install Splunk Add-On for AWS Version v7.0.0 (https://splunkbase.splunk.com/app/1876) that includes includes a merge of all the capabilities of the Splunk Add-on for Amazon Security Lake. This search works with Amazon Security Lake logs which are parsed in the Open Cybersecurity Schema Framework (OCSF)format.", "known_false_positives": "While this search has no known false positives, it is possible that an AWS admin has deleted CloudWatch logging. Please investigate this activity.", "check_references": false, "references": ["https://attack.mitre.org/techniques/T1562/008/"], "datamodel": [], "macros": [{"name": "amazon_security_lake", "definition": "sourcetype=aws:asl", "description": "customer specific splunk configurations(eg- index, source, sourcetype). Replace the macro definition with configurations for your Splunk Environmnent."}, {"name": "security_content_ctime", "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "arguments": ["field"]}, {"name": "asl_aws_defense_evasion_delete_cloudwatch_log_group_filter", "definition": "search *", "description": "Update this macro to limit the output results to filter out false positives."}], "lookups": [], "source": "cloud", "nes_fields": "user,dest", "providing_technologies": ["Amazon Security Lake"], "enabled_by_default": false, "test_groups": [{"name": "ASL AWS Defense Evasion Delete CloudWatch Log Group:True Positive Test", "unit_test": {"name": "True Positive Test", "test_type": "unit", "baselines": [], "attack_data": [{"data": "https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/attack_techniques/T1562.008/delete_cloudwatch_log_group/amazon_security_lake.json", "source": "aws_asl", "sourcetype": "aws:asl", "update_timestamp": true}]}, "integration_test": {"name": "True Positive Test", "test_type": "integration"}, "attack_data": [{"data": "https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/attack_techniques/T1562.008/delete_cloudwatch_log_group/amazon_security_lake.json", "source": "aws_asl", "sourcetype": "aws:asl", "update_timestamp": true}]}]}, {"name": "ASL AWS Defense Evasion Impair Security Services", "author": "Patrick Bareiss, Bhavin Patel, Gowthamaraj Rajendran, Splunk", "date": "2023-06-01", "version": 1, "id": "5029b681-0462-47b7-82e7-f7e3d37f5a2d", "description": "This analytic looks for several delete specific API calls made to AWS Security Services like CloudWatch, GuardDuty and Web Application Firewalls. These API calls are often leveraged by adversaries to weaken existing security defenses by deleting logging configurations in the CloudWatch alarm, delete a set of detectors from your Guardduty environment or simply delete a bunch of CloudWatch alarms to remain stealthy and avoid detection.", "tags": {"name": "ASL AWS Defense Evasion Impair Security Services", "analytic_story": ["AWS Defense Evasion"], "asset_type": "AWS Account", "cis20": ["CIS 10"], "kill_chain_phases": [], "mitre_attack_id": ["T1562.008", "T1562"], "nist": ["DE.AE"], "observable": [{"name": "src_endpoint.ip", "type": "IP Address", "role": ["Attacker"]}, {"name": "identity.user.name", "type": "User", "role": ["Attacker"]}], "message": "User $identity.user.name$ has made potentially risky api calls $api.operation$ that could impair AWS security services for account id $identity.user.account_uid$", "risk_score": 42, "security_domain": "threat", "risk_severity": "low", "mitre_attack_enrichments": []}, "search": "`amazon_security_lake` api.operation IN (\"DeleteLogStream\",\"DeleteDetector\",\"DeleteIPSet\",\"DeleteWebACL\",\"DeleteRule\",\"DeleteRuleGroup\",\"DeleteLoggingConfiguration\",\"DeleteAlarms\") | stats count min(_time) as firstTime max(_time) as lastTime by api.operation identity.user.account_uid identity.user.credential_uid identity.user.name identity.user.type identity.user.uid identity.user.uuid http_request.user_agent src_endpoint.ip cloud.region | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)`|  `asl_aws_defense_evasion_impair_security_services_filter`", "how_to_implement": "You must install Splunk Add-On for AWS Version v7.0.0 (https://splunkbase.splunk.com/app/1876) that includes includes a merge of all the capabilities of the Splunk Add-on for Amazon Security Lake. This search works with Amazon Security Lake logs which are parsed in the Open Cybersecurity Schema Framework (OCSF)format.", "known_false_positives": "While this search has no known false positives, it is possible that it is a legitimate admin activity. Please consider filtering out these noisy events using userAgent, user_arn field names.", "check_references": false, "references": ["https://docs.aws.amazon.com/cli/latest/reference/guardduty/index.html", "https://docs.aws.amazon.com/cli/latest/reference/waf/index.html", "https://www.elastic.co/guide/en/security/current/prebuilt-rules.html"], "datamodel": ["Web"], "macros": [{"name": "amazon_security_lake", "definition": "sourcetype=aws:asl", "description": "customer specific splunk configurations(eg- index, source, sourcetype). Replace the macro definition with configurations for your Splunk Environmnent."}, {"name": "security_content_ctime", "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "arguments": ["field"]}, {"name": "asl_aws_defense_evasion_impair_security_services_filter", "definition": "search *", "description": "Update this macro to limit the output results to filter out false positives."}], "lookups": [], "source": "cloud", "providing_technologies": ["Amazon Security Lake"], "enabled_by_default": false, "test_groups": [{"name": "ASL AWS Defense Evasion Impair Security Services:True Positive Test", "unit_test": {"name": "True Positive Test", "test_type": "unit", "baselines": [], "attack_data": [{"data": "https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/attack_techniques/T1562.008/aws_delete_security_services/amazon_security_lake.json", "source": "aws_asl", "sourcetype": "aws:asl", "update_timestamp": true}]}, "integration_test": {"name": "True Positive Test", "test_type": "integration"}, "attack_data": [{"data": "https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/attack_techniques/T1562.008/aws_delete_security_services/amazon_security_lake.json", "source": "aws_asl", "sourcetype": "aws:asl", "update_timestamp": true}]}]}, {"name": "ASL AWS Excessive Security Scanning", "author": "Patrick Bareiss, Splunk", "date": "2023-06-01", "version": 1, "id": "ff2bfdbc-65b7-4434-8f08-d55761d1d446", "description": "This search looks for AWS CloudTrail events and analyse the amount of eventNames which starts with Describe by a single user. This indicates that this user scans the configuration of your AWS cloud environment.", "tags": {"name": "ASL AWS Excessive Security Scanning", "analytic_story": ["AWS User Monitoring"], "asset_type": "AWS Account", "cis20": ["CIS 13"], "kill_chain_phases": [], "mitre_attack_id": ["T1526"], "nist": ["DE.AE"], "observable": [{"name": "src_endpoint.ip", "type": "IP Address", "role": ["Attacker"]}, {"name": "identity.user.name", "type": "User", "role": ["Attacker"]}], "message": "user $identity.user.name$ has excessive number of api calls.", "risk_score": 18, "security_domain": "network", "risk_severity": "low", "mitre_attack_enrichments": []}, "search": "`amazon_security_lake` api.operation=Describe* OR api.operation=List* OR api.operation=Get* | stats dc(api.operation) as dc_api_operations min(_time) as firstTime max(_time) as lastTime values(http_request.user_agent) as http_request.user_agent values(src_endpoint.ip) as src_endpoint.ip values(cloud.region) as cloud.region values(identity.user.account_uid) as identity.user.account_uid by identity.user.name | where dc_api_operations > 50 | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)`|`asl_aws_excessive_security_scanning_filter`", "how_to_implement": "You must install Splunk Add-On for AWS Version v7.0.0 (https://splunkbase.splunk.com/app/1876) that includes includes a merge of all the capabilities of the Splunk Add-on for Amazon Security Lake. This search works with Amazon Security Lake logs which are parsed in the Open Cybersecurity Schema Framework (OCSF)format.", "known_false_positives": "While this search has no known false positives.", "check_references": false, "references": ["https://github.com/aquasecurity/cloudsploit"], "datamodel": [], "macros": [{"name": "amazon_security_lake", "definition": "sourcetype=aws:asl", "description": "customer specific splunk configurations(eg- index, source, sourcetype). Replace the macro definition with configurations for your Splunk Environmnent."}, {"name": "security_content_ctime", "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "arguments": ["field"]}, {"name": "asl_aws_excessive_security_scanning_filter", "definition": "search *", "description": "Update this macro to limit the output results to filter out false positives."}], "lookups": [], "source": "cloud", "providing_technologies": ["Amazon Security Lake"], "enabled_by_default": false, "test_groups": []}, {"name": "ASL AWS IAM Delete Policy", "author": "Patrick Bareiss, Splunk", "date": "2023-06-02", "version": 1, "id": "609ced68-d420-4ff7-8164-ae98b4b4018c", "description": "The following detection identifes when a policy is deleted on AWS. This does not identify whether successful or failed, but the error messages tell a story of suspicious attempts. There is a specific process to follow when deleting a policy. First, detach the policy from all users, groups, and roles that the policy is attached to, using DetachUserPolicy , DetachGroupPolicy , or DetachRolePolicy.", "tags": {"name": "ASL AWS IAM Delete Policy", "analytic_story": ["AWS IAM Privilege Escalation"], "asset_type": "AWS Account", "cis20": ["CIS 10"], "kill_chain_phases": [], "mitre_attack_id": ["T1098"], "nist": ["DE.AE"], "observable": [{"name": "src_endpoint.ip", "type": "IP Address", "role": ["Attacker"]}, {"name": "identity.user.name", "type": "User", "role": ["Victim"]}], "message": "User $user_arn$ has deleted AWS Policies from IP address $src$ by executing the following command $eventName$", "risk_score": 10, "security_domain": "access", "risk_severity": "low", "mitre_attack_enrichments": []}, "search": "`amazon_security_lake` api.operation=DeletePolicy | stats count min(_time) as firstTime max(_time) as lastTime by api.operation api.service.name identity.user.account_uid identity.user.credential_uid identity.user.name identity.user.type identity.user.uid identity.user.uuid http_request.user_agent src_endpoint.ip cloud.region | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `asl_aws_iam_delete_policy_filter`", "how_to_implement": "You must install Splunk Add-On for AWS Version v7.0.0 (https://splunkbase.splunk.com/app/1876) that includes includes a merge of all the capabilities of the Splunk Add-on for Amazon Security Lake. This search works with Amazon Security Lake logs which are parsed in the Open Cybersecurity Schema Framework (OCSF)format.", "known_false_positives": "This detection will require tuning to provide high fidelity detection capabilties. Tune based on src addresses (corporate offices, VPN terminations) or by groups of users. Not every user with AWS access should have permission to delete policies (least privilege). In addition, this may be saved seperately and tuned for failed or success attempts only.", "check_references": false, "references": ["https://docs.aws.amazon.com/IAM/latest/APIReference/API_DeletePolicy.html", "https://docs.aws.amazon.com/cli/latest/reference/iam/delete-policy.html"], "datamodel": [], "macros": [{"name": "amazon_security_lake", "definition": "sourcetype=aws:asl", "description": "customer specific splunk configurations(eg- index, source, sourcetype). Replace the macro definition with configurations for your Splunk Environmnent."}, {"name": "security_content_ctime", "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "arguments": ["field"]}, {"name": "asl_aws_iam_delete_policy_filter", "definition": "search *", "description": "Update this macro to limit the output results to filter out false positives."}], "lookups": [], "source": "cloud", "providing_technologies": ["Amazon Security Lake"], "enabled_by_default": false, "test_groups": [{"name": "ASL AWS IAM Delete Policy:True Positive Test", "unit_test": {"name": "True Positive Test", "test_type": "unit", "baselines": [], "attack_data": [{"data": "https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/attack_techniques/T1098/aws_iam_delete_policy/amazon_security_lake.json", "source": "aws_asl", "sourcetype": "aws:asl", "update_timestamp": true}]}, "integration_test": {"name": "True Positive Test", "test_type": "integration"}, "attack_data": [{"data": "https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/attack_techniques/T1098/aws_iam_delete_policy/amazon_security_lake.json", "source": "aws_asl", "sourcetype": "aws:asl", "update_timestamp": true}]}]}, {"name": "ASL AWS Multi-Factor Authentication Disabled", "author": "Patrick Bareiss, Splunk", "date": "2023-06-02", "version": 1, "id": "4d2df5e0-1092-4817-88a8-79c7fa054668", "description": "The following analytic identifies an attempt to disable multi-factor authentication for an AWS IAM user. An adversary who has obtained access to an AWS tenant may disable multi-factor authentication as a way to plant a backdoor and maintain persistence using a valid account. This way the attackers can keep persistance in the environment without adding new users.", "tags": {"name": "ASL AWS Multi-Factor Authentication Disabled", "analytic_story": ["AWS Identity and Access Management Account Takeover"], "asset_type": "AWS Account", "cis20": ["CIS 10"], "kill_chain_phases": [], "mitre_attack_id": ["T1586", "T1586.003", "T1621", "T1556", "T1556.006"], "nist": ["DE.CM"], "observable": [{"name": "identity.user.account_uid", "type": "Other", "role": ["Victim"]}, {"name": "identity.user.name", "type": "User", "role": ["Victim"]}, {"name": "src_endpoint.ip", "type": "IP Address", "role": ["Attacker"]}], "message": "User $user_name$ has disabled Multi-Factor authentication for AWS account $aws_account_id$", "risk_score": 64, "security_domain": "threat", "risk_severity": "medium", "mitre_attack_enrichments": []}, "search": "`amazon_security_lake` (api.operation=DeleteVirtualMFADevice OR api.operation=DeactivateMFADevice) | stats count min(_time) as firstTime max(_time) as lastTime by api.operation api.service.name identity.user.account_uid identity.user.credential_uid identity.user.name identity.user.type identity.user.uid identity.user.uuid http_request.user_agent src_endpoint.ip cloud.region | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `asl_aws_multi_factor_authentication_disabled_filter`", "how_to_implement": "You must install Splunk Add-On for AWS Version v7.0.0 (https://splunkbase.splunk.com/app/1876) that includes includes a merge of all the capabilities of the Splunk Add-on for Amazon Security Lake. This search works with Amazon Security Lake logs which are parsed in the Open Cybersecurity Schema Framework (OCSF)format.", "known_false_positives": "AWS Administrators may disable MFA but it is highly unlikely for this event to occur without prior notice to the company", "check_references": false, "references": ["https://attack.mitre.org/techniques/T1621/", "https://aws.amazon.com/what-is/mfa/"], "datamodel": [], "macros": [{"name": "amazon_security_lake", "definition": "sourcetype=aws:asl", "description": "customer specific splunk configurations(eg- index, source, sourcetype). Replace the macro definition with configurations for your Splunk Environmnent."}, {"name": "security_content_ctime", "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "arguments": ["field"]}, {"name": "asl_aws_multi_factor_authentication_disabled_filter", "definition": "search *", "description": "Update this macro to limit the output results to filter out false positives."}], "lookups": [], "source": "cloud", "nes_fields": "user,dest", "providing_technologies": ["Amazon Security Lake"], "enabled_by_default": false, "test_groups": [{"name": "ASL AWS Multi-Factor Authentication Disabled:True Positive Test", "unit_test": {"name": "True Positive Test", "test_type": "unit", "baselines": [], "attack_data": [{"data": "https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/attack_techniques/T1621/aws_mfa_disabled/amazon_security_lake.json", "source": "aws_asl", "sourcetype": "aws:asl", "update_timestamp": true}]}, "integration_test": {"name": "True Positive Test", "test_type": "integration"}, "attack_data": [{"data": "https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/attack_techniques/T1621/aws_mfa_disabled/amazon_security_lake.json", "source": "aws_asl", "sourcetype": "aws:asl", "update_timestamp": true}]}]}]}